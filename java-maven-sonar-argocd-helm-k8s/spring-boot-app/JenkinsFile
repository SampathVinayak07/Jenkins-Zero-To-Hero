pipeline {
  agent {
    docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            // Add this line to bypass the problematic ENTRYPOINT
            args '--entrypoint=""' 
        }
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Using your forked repo, Jenkins will handle checkout
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
        # 1. Take ownership of the workspace (Fixes permission issues)
        chown -R $(id -u):$(id -g) .

        # 2. Change directory and run build
        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
        mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.226.211.4:9000" // Your SonarQube server
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    stage('Build Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}" // Using his DockerHub image temporarily
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          echo "Docker image built: ${DOCKER_IMAGE}"
          // No push, since this is temporary
        }
      }
    }
  }
}

